//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CBPostEffect
// {
//
//   float _contrast;                   // Offset:    0 Size:     4
//   float _saturation;                 // Offset:    4 Size:     4
//   float _chromatic_aberration;       // Offset:    8 Size:     4
//   float _hueShift;                   // Offset:   12 Size:     4
//   float3 _colorFilter;               // Offset:   16 Size:    12
//   float dummy1;                      // Offset:   28 Size:     4 [unused]
//   float _vignetteIntensity;          // Offset:   32 Size:     4
//   float _vignetteOpacity;            // Offset:   36 Size:     4
//   float _blurStrength;               // Offset:   40 Size:     4
//   float dummy2;                      // Offset:   44 Size:     4 [unused]
//   float _bloomThreshold;             // Offset:   48 Size:     4
//   float _bloomIntensity;             // Offset:   52 Size:     4
//   float2 dummy3;                     // Offset:   56 Size:     8 [unused]
//   float _focusDistance;              // Offset:   64 Size:     4
//   float _focusRange;                 // Offset:   68 Size:     4
//   float _dofBlurStrength;            // Offset:   72 Size:     4
//   float dummy4;                      // Offset:   76 Size:     4 [unused]
//   float2 _shakeOffset;               // Offset:   80 Size:     8
//   float _shakeStrength;              // Offset:   88 Size:     4
//   float _shakeTime;                  // Offset:   92 Size:     4
//   float _shakeSpeed;                 // Offset:   96 Size:     4
//   float3 dummy5;                     // Offset:  100 Size:    12 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// spriteSampler                     sampler      NA          NA             s0      1 
// spriteTexture                     texture  float4          2d             t0      1 
// depthTexture                      texture  float4          2d             t1      1 
// CBPostEffect                      cbuffer      NA          NA            cb5      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB5[7], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 6
dcl_indexableTemp x0[5], 4
dcl_indexableTemp x1[3], 4
//
// Initial variable locations:
//   v0.x <- pin.position.x; v0.y <- pin.position.y; v0.z <- pin.position.z; v0.w <- pin.position.w; 
//   v1.x <- pin.texcoord.x; v1.y <- pin.texcoord.y; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w
//
#line 186 "C:\Users\2230018\Desktop\授業\3年\チE웈制作\3回目\チE"
nop 
mov r0.xy, v1.xyxx

#line 172
mul r0.z, cb5[5].w, cb5[6].x
sincos r0.z, null, r0.z
mul r1.x, r0.z, cb5[5].z  // r1.x <- shakeX

#line 173
mul r0.z, cb5[5].w, cb5[6].x
sincos null, r0.z, r0.z
mul r1.y, r0.z, cb5[5].z  // r1.y <- shakeY

#line 174
mul r0.zw, r1.xxxy, cb5[5].xxxy  // r0.z <- shake.x; r0.w <- shake.y

#line 175
add r0.xy, r0.zwzz, r0.xyxx

#line 178
max r0.xy, r0.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
min r0.xy, r0.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)  // r0.x <- uv.x; r0.y <- uv.y

#line 180
mov r0.xy, r0.xyxx  // r0.x <- <ScreenShake return value>.x; r0.y <- <ScreenShake return value>.y

#line 186
mov r0.xy, r0.xyxx  // r0.x <- shakenUV.x; r0.y <- shakenUV.y

#line 188
nop 
mov r0.xy, r0.xyxx

#line 79
mov r0.zw, -r0.xxxy
add r0.zw, r0.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000)
mul r0.zw, r0.zzzw, cb5[0].zzzz  // r0.z <- v.x; r0.w <- v.y

#line 80
sample_indexable(texture2d)(float,float,float,float) r1.x, r0.xyxx, t0.xyzw, s0
mov r1.x, r1.x  // r1.x <- r

#line 81
add r2.xy, r0.zwzz, r0.xyxx
sample_indexable(texture2d)(float,float,float,float) r1.y, r2.xyxx, t0.xyzw, s0
mov r1.y, r1.y  // r1.y <- g

#line 82
mul r0.zw, r0.zzzw, l(0.000000, 0.000000, 2.000000, 2.000000)
add r0.xy, r0.zwzz, r0.xyxx
sample_indexable(texture2d)(float,float,float,float) r1.z, r0.xyxx, t0.xyzw, s0
mov r1.z, r1.z  // r1.z <- b

#line 84
mov r1.x, r1.x  // r1.x <- <ChromaticAberration return value>.x
mov r1.y, r1.y  // r1.y <- <ChromaticAberration return value>.y
mov r1.z, r1.z  // r1.z <- <ChromaticAberration return value>.z

#line 188
mov r1.xyz, r1.xyzx  // r1.x <- color.x; r1.y <- color.y; r1.z <- color.z

#line 189
nop 
mov r0.xy, v1.xyxx

#line 153
sample_indexable(texture2d)(float,float,float,float) r0.z, v1.xyxx, t1.yzxw, s0
mov r0.z, r0.z  // r0.z <- depth

#line 154
mov r0.w, -cb5[4].x
add r0.z, r0.w, r0.z
mov r0.w, -r0.z
max r0.z, r0.w, r0.z
div r0.z, r0.z, cb5[4].y  // r0.z <- blurFactor

#line 155
max r0.z, r0.z, l(0.000000)
min r0.z, r0.z, l(1.000000)
mul r0.z, r0.z, cb5[4].z
mul r0.z, r0.z, cb5[2].z  // r0.z <- blurFactor

#line 156
nop 
mov r0.xy, r0.xyxx
mov r0.z, r0.z

#line 140
mov r2.xy, l(0.000521,0.000926,0,0)  // r2.x <- texelSize.x; r2.y <- texelSize.y

#line 141
itof r3.xyz, l(0, 0, 0, 0)  // r3.x <- sum.x; r3.y <- sum.y; r3.z <- sum.z

#line 142
mov x0[0].x, l(0.227000)
mov x0[1].x, l(0.194000)
mov x0[2].x, l(0.121000)
mov x0[3].x, l(0.054000)
mov x0[4].x, l(0.016000)

#line 143
mov r0.w, l(-2)  // r0.w <- i
mov r4.xyz, r3.xyzx  // r4.x <- sum.x; r4.y <- sum.y; r4.z <- sum.z
mov r1.w, r0.w  // r1.w <- i
loop 
  ige r2.z, l(2), r1.w
  breakc_z r2.z

#line 145
  itof r5.x, r1.w
  itof r5.y, l(0)
  mul r2.zw, r2.xxxy, r5.xxxy
  mul r2.zw, r0.zzzz, r2.zzzw
  add r2.zw, r0.xxxy, r2.zzzw
  sample_indexable(texture2d)(float,float,float,float) r5.xyz, r2.zwzz, t0.xyzw, s0
  ineg r2.z, r1.w
  imax r2.z, r1.w, r2.z
  mov r2.z, x0[r2.z + 0].x
  mul r5.xyz, r2.zzzz, r5.xyzx
  add r4.xyz, r4.xyzx, r5.xyzx

#line 146
  iadd r1.w, r1.w, l(1)
endloop 

#line 147
mov r4.xyz, r4.xyzx  // r4.x <- <GaussianBlur return value>.x; r4.y <- <GaussianBlur return value>.y; r4.z <- <GaussianBlur return value>.z

#line 156
mov r4.xyz, r4.xyzx  // r4.x <- <DepthOfField return value>.x; r4.y <- <DepthOfField return value>.y; r4.z <- <DepthOfField return value>.z

#line 189
mul r0.xyz, r4.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
mul r1.xyz, r1.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z

#line 190
nop 
mov r0.xyz, r0.xyzx

#line 47
mov r1.xyz, l(-0.500000,-0.500000,-0.500000,-0.000000)
add r0.xyz, r0.xyzx, r1.xyzx

#line 48
mul r0.xyz, r0.xyzx, cb5[0].xxxx

#line 50
add r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)

#line 51
mov r0.xyz, r0.xyzx  // r0.x <- <Contrast return value>.x; r0.y <- <Contrast return value>.y; r0.z <- <Contrast return value>.z

#line 190
mov r0.xyz, r0.xyzx  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z

#line 191
nop 
mov r0.xyz, r0.xyzx

#line 57
mul r0.w, r0.x, l(0.299000)
mul r1.x, r0.y, l(0.587000)
add r0.w, r0.w, r1.x
mul r1.x, r0.z, l(0.114000)
add r0.w, r0.w, r1.x  // r0.w <- gray

#line 61
mov r1.xyz, -r0.wwww
add r0.xyz, r0.xyzx, r1.xyzx

#line 62
mul r0.xyz, r0.xyzx, cb5[0].yyyy

#line 63
add r0.xyz, r0.wwww, r0.xyzx

#line 65
mov r0.xyz, r0.xyzx  // r0.x <- <Saturation return value>.x; r0.y <- <Saturation return value>.y; r0.z <- <Saturation return value>.z

#line 191
mov r0.xyz, r0.xyzx  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z

#line 192
nop 
mov r0.xyz, r0.xyzx

#line 71
mul r0.xyw, r0.yzyx, cb5[1].yzyx  // r0.x <- color.y; r0.y <- color.z; r0.w <- color.x

#line 72
mov r0.xyw, r0.xyxw  // r0.x <- <ColorFilter return value>.y; r0.y <- <ColorFilter return value>.z; r0.w <- <ColorFilter return value>.x

#line 192
mov r0.xyw, r0.xyxw  // r0.x <- color.y; r0.y <- color.z; r0.w <- color.x

#line 193
nop 
mov r0.xyw, r0.xyxw

#line 111
nop 
mov r0.xyw, r0.xyxw

#line 92
mov r1.xyzw, l(0,-0.333333,0.666667,-1.000000)  // r1.x <- K.x; r1.y <- K.y; r1.z <- K.z; r1.w <- K.w

#line 93
ge r2.x, r0.x, r0.y
movc r2.x, r2.x, l(1.000000), l(0)
mov r3.xy, r0.yxyy
mov r3.zw, r1.wwwz
mov r4.xyzw, -r3.xyzw
add r5.xy, r0.xyxx, r4.xyxx
add r5.zw, r1.xxxy, r4.zzzw
mul r1.xyzw, r2.xxxx, r5.xyzw
add r1.xyzw, r1.xyzw, r3.xyzw  // r1.x <- p.x; r1.y <- p.y; r1.z <- p.z; r1.w <- p.w

#line 94
ge r2.x, r0.w, r1.x
movc r2.x, r2.x, l(1.000000), l(0)
mov r0.xyz, r1.xywx
mov r3.xyzw, -r0.xyzw
mov r1.xyw, r0.wywx
add r1.xyzw, r3.xyzw, r1.xyzw
mul r1.xyzw, r1.xyzw, r2.xxxx
add r0.xyzw, r0.zxyw, r1.zxyw  // r0.x <- q.z; r0.y <- q.x; r0.z <- q.y; r0.w <- q.w

#line 95
min r1.x, r0.z, r0.w
mov r1.x, -r1.x
add r1.x, r0.y, r1.x  // r1.x <- d

#line 96
mov r1.y, l(0.000000)  // r1.y <- e

#line 97
mov r1.z, -r0.z
add r0.w, r0.w, r1.z
mul r1.z, r1.x, l(6.000000)
add r1.z, r1.y, r1.z
div r0.w, r0.w, r1.z
add r0.w, r0.w, r0.x
mov r1.z, -r0.w
max r0.z, r0.w, r1.z  // r0.z <- <RGBtoHSV return value>.x
add r0.w, r0.y, r1.y
div r0.x, r1.x, r0.w  // r0.x <- <RGBtoHSV return value>.y
mov r0.y, r0.y  // r0.y <- <RGBtoHSV return value>.z

#line 111
mov r0.xyz, r0.xyzx  // r0.x <- hsv.y; r0.y <- hsv.z; r0.z <- hsv.x

#line 112
add r0.z, r0.z, cb5[0].w
frc r0.z, r0.z  // r0.z <- hsv.x

#line 113
nop 
mov r0.z, r0.z
mov r0.xy, r0.xyxx

#line 103
mov r1.xyzw, l(1.000000,0.666667,0.333333,3.000000)  // r1.x <- K.x; r1.y <- K.y; r1.z <- K.z; r1.w <- K.w

#line 104
add r2.xyz, r0.zzzz, r1.xyzx
frc r2.xyz, r2.xyzx
mul r2.xyz, r2.xyzx, l(6.000000, 6.000000, 6.000000, 0.000000)
mov r1.yzw, -r1.wwww
add r1.yzw, r1.yyzw, r2.xxyz
mov r2.xyz, -r1.yzwy
max r1.yzw, r1.yyzw, r2.xxyz  // r1.y <- p.x; r1.z <- p.y; r1.w <- p.z

#line 105
mov r2.xyz, -r1.xxxx
add r1.yzw, r1.yyzw, r2.xxyz
max r1.yzw, r1.yyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
min r1.yzw, r1.yyzw, l(0.000000, 1.000000, 1.000000, 1.000000)
mov r2.xyz, -r1.xxxx
add r1.yzw, r1.yyzw, r2.xxyz
mul r0.xzw, r0.xxxx, r1.yyzw
add r0.xzw, r0.xxzw, r1.xxxx
mul r0.xyz, r0.xzwx, r0.yyyy  // r0.x <- <HSVtoRGB return value>.x; r0.y <- <HSVtoRGB return value>.y; r0.z <- <HSVtoRGB return value>.z

#line 113
mov r0.xyz, r0.xyzx  // r0.x <- <HueShift return value>.x; r0.y <- <HueShift return value>.y; r0.z <- <HueShift return value>.z

#line 193
mov r0.xyz, r0.xyzx  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z

#line 194
nop 
mov r0.xyz, r0.xyzx
mov r1.xy, v1.xyxx

#line 121
itof r0.w, l(0)
lt r0.w, r0.w, cb5[2].x
if_nz r0.w

#line 123
  mov r1.zw, l(0,0,0.500000,0.500000)  // r1.z <- center.x; r1.w <- center.y

#line 124
  mov r1.zw, -r1.zzzw
  add r1.xy, r1.zwzz, r1.xyxx
  dp2 r0.w, r1.xyxx, r1.xyxx
  sqrt r0.w, r0.w  // r0.w <- dist

#line 127
  mov r1.x, l(-0.300000)
  add r1.y, r1.x, l(0.500000)
  add r0.w, r0.w, r1.x
  div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
  mul r0.w, r0.w, r1.x
  max r0.w, r0.w, l(0.000000)
  min r0.w, r0.w, l(1.000000)
  mul r1.x, r0.w, l(-2.000000)
  add r1.x, r1.x, l(3.000000)
  mul r0.w, r0.w, r0.w
  mul r0.w, r0.w, r1.x
  mov r0.w, -r0.w
  add r0.w, r0.w, l(1.000000)  // r0.w <- vignette

#line 130
  mul r1.x, cb5[2].y, cb5[2].x  // r1.x <- blend

#line 132
  mov r1.y, l(-1.000000)
  add r0.w, r0.w, r1.y
  mul r0.w, r0.w, r1.x
  add r0.w, r0.w, l(1.000000)
  mul r0.xyz, r0.wwww, r0.xyzx

#line 133
endif 

#line 134
mov r0.xyz, r0.xyzx  // r0.x <- <Vignette return value>.x; r0.y <- <Vignette return value>.y; r0.z <- <Vignette return value>.z

#line 194
mov r0.xyz, r0.xyzx  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z

#line 196
nop 
mov r1.xy, v1.xyxx

#line 162
sample_indexable(texture2d)(float,float,float,float) r2.xyz, v1.xyxx, t0.xyzw, s0
mov r2.xyz, r2.xyzx  // r2.x <- color.x; r2.y <- color.y; r2.z <- color.z

#line 163
dp3 r0.w, r2.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)  // r0.w <- brightness

#line 164
lt r0.w, r0.w, cb5[3].x
if_nz r0.w

#line 165
  itof r2.xyz, l(0, 0, 0, 0)
endif   // r2.x <- <BloomEffect return value>.x; r2.y <- <BloomEffect return value>.y; r2.z <- <BloomEffect return value>.z

#line 166
if_z r0.w
  nop 
  mov r1.xy, r1.xyxx
  mov r0.w, cb5[2].z

#line 140
  mov r1.zw, l(0,0,0.000521,0.000926)  // r1.z <- texelSize.x; r1.w <- texelSize.y

#line 141
  itof r3.xyz, l(0, 0, 0, 0)  // r3.x <- sum.x; r3.y <- sum.y; r3.z <- sum.z

#line 142
  mov x1[0].x, l(0.227000)
  mov x1[1].x, l(0.194000)
  mov x1[2].x, l(0.121000)

#line 143
  mov r2.w, l(-2)  // r2.w <- i

#line 145
  itof r4.x, r2.w
  itof r4.y, l(0)
  mul r4.xy, r1.zwzz, r4.xyxx
  mul r4.xy, r0.wwww, r4.xyxx
  add r4.xy, r1.xyxx, r4.xyxx
  sample_indexable(texture2d)(float,float,float,float) r4.xyz, r4.xyxx, t0.xyzw, s0
  mov r2.w, x1[2].x
  mul r4.xyz, r2.wwww, r4.xyzx
  add r3.xyz, r3.xyzx, r4.xyzx
  itof r4.xy, l(-1, 0, 0, 0)
  mul r4.xy, r1.zwzz, r4.xyxx
  mul r4.xy, r0.wwww, r4.xyxx
  add r4.xy, r1.xyxx, r4.xyxx
  sample_indexable(texture2d)(float,float,float,float) r4.xyz, r4.xyxx, t0.xyzw, s0
  mov r2.w, x1[1].x
  mul r4.xyz, r2.wwww, r4.xyzx
  add r3.xyz, r3.xyzx, r4.xyzx

#line 146
  iadd r2.w, l(1), l(-1)  // r2.w <- i

#line 145
  itof r4.x, r2.w
  itof r4.y, l(0)
  mul r4.xy, r1.zwzz, r4.xyxx
  mul r4.xy, r0.wwww, r4.xyxx
  add r4.xy, r1.xyxx, r4.xyxx
  sample_indexable(texture2d)(float,float,float,float) r4.xyz, r4.xyxx, t0.xyzw, s0
  mov r3.w, x1[0].x
  mul r4.xyz, r3.wwww, r4.xyzx
  add r3.xyz, r3.xyzx, r4.xyzx

#line 146
  iadd r2.w, r2.w, l(1)

#line 145
  itof r4.x, r2.w
  itof r4.y, l(0)
  mul r4.xy, r1.zwzz, r4.xyxx
  mul r4.xy, r0.wwww, r4.xyxx
  add r4.xy, r1.xyxx, r4.xyxx
  sample_indexable(texture2d)(float,float,float,float) r4.xyz, r4.xyxx, t0.xyzw, s0
  mov r3.w, x1[1].x
  mul r4.xyz, r3.wwww, r4.xyzx
  add r3.xyz, r3.xyzx, r4.xyzx

#line 146
  iadd r2.w, r2.w, l(1)

#line 145
  itof r4.x, r2.w
  itof r4.y, l(0)
  mul r1.zw, r1.zzzw, r4.xxxy
  mul r1.zw, r0.wwww, r1.zzzw
  add r1.xy, r1.zwzz, r1.xyxx
  sample_indexable(texture2d)(float,float,float,float) r1.xyz, r1.xyxx, t0.xyzw, s0
  mov r0.w, x1[2].x
  mul r1.xyz, r0.wwww, r1.xyzx
  add r1.xyz, r1.xyzx, r3.xyzx  // r1.x <- sum.x; r1.y <- sum.y; r1.z <- sum.z

#line 147
  mov r1.xyz, r1.xyzx  // r1.x <- <GaussianBlur return value>.x; r1.y <- <GaussianBlur return value>.y; r1.z <- <GaussianBlur return value>.z

#line 166
  mul r2.xyz, r1.xyzx, cb5[3].yyyy
endif 

#line 196
mov r2.xyz, r2.xyzx  // r2.x <- bloom.x; r2.y <- bloom.y; r2.z <- bloom.z

#line 197
add r0.xyz, r0.xyzx, r2.xyzx

#line 199
mov o0.xyz, r0.xyzx
mov o0.w, l(1.000000)
ret 
// Approximately 274 instruction slots used
